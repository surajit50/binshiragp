datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Visitor {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  totalVisitors Int
  visitorOnline Int
}

enum UserRole {
  user
  admin
  staff
  superadmin
}

enum UserStatus {
  active
  inactive
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(user)
  accounts      Account[]
  sessions      Session[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  imageKey              String?

  userStatus UserStatus @default(active)

  Leave          Leave[]
  approvedLeaves Leave[] @relation("ApproverLeaves")

  notifications            Notification[]
  messagesSent             Message[]                  @relation("MessagesSent")
  messagesReceived         Message[]                  @relation("MessagesReceived")
  warishapplicaton         WarishApplication[]
  warishDocument           WarishDocument[]
  bookings                 Booking[]
  auditLog                 AuditLog[]
  familyLineageCertificate FamilyLineageCertificate[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  User User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model HeroSectionImage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  heroImageDescription String
  imageKey             String @unique
  imageUrl             String
}

enum Leavestatus {
  pending
  approved
  rejected
  cancelled
}

model Leave {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  User           User        @relation(fields: [userId], references: [id])
  userId         String      @db.ObjectId
  startDate      DateTime
  endDate        DateTime
  status         Leavestatus @default(pending)
  reason         String
  leaveType      String?
  durationInDays Float?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  approver       User?       @relation("ApproverLeaves", fields: [approverId], references: [id])
  approverId     String?     @db.ObjectId
}

model WarishApplication {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  reportingDate         DateTime
  acknowlegment         String   @unique
  applicantName         String
  applicantMobileNumber String
  relationwithdeceased  String
  nameOfDeceased        String
  dateOfDeath           DateTime

  gender                  Gender
  maritialStatus          MaritialStatus
  fatherName              String
  spouseName              String?
  villageName             String
  postOffice              String
  warishDetails           WarishDetail[]
  assingstaffId           String?                 @db.ObjectId
  fieldreportRemark       String?
  adminNoteRemark         String?
  warishRefNo             String?
  warishRefDate           DateTime?
  approvalYear            String?
  renewdate               DateTime?
  warishApplicationStatus WarishApplicationStatus @default(submitted)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  User                    User?                   @relation(fields: [userId], references: [id])
  userId                  String?                 @db.ObjectId
  warishdocumentverified  Boolean                 @default(false)
  WarishDocument          WarishDocument[]

  @@index([applicantName, nameOfDeceased])
}

model WarishDetail {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  gender              Gender
  relation            FamilyRelationship
  livingStatus        LivingStatus
  maritialStatus      MaritialStatus
  hasbandName         String?
  children            WarishDetail[]     @relation("ParentChild")
  parent              WarishDetail?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId            String?            @db.ObjectId
  warishApplication   WarishApplication  @relation(fields: [warishApplicationId], references: [id], onDelete: Cascade)
  warishApplicationId String             @db.ObjectId
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@index([name, warishApplicationId])
}

enum Gender {
  male
  female
  other
}

enum MaritialStatus {
  married
  unmarried
  divorced
  widowed
}

enum LivingStatus {
  alive
  dead
}

enum WarishApplicationStatus {
  submitted
  pending
  process
  approved
  rejected
  cancelled
  renewed
}

enum FamilyRelationship {
  Son
  Daughter
  Father
  Mother
  Brother
  Wife
  Husband
  Sister
  Grandfather
  Grandmother
  Grandson
  Granddaughter
  Uncle
  Aunt
  Nephew
  Niece
  Cousin
  Stepfather
  Stepmother
  Stepson
  Stepdaughter
  Stepbrother
  Stepsister
  HalfBrother
  HalfSister
  FatherInLaw
  MotherInLaw
  SonInLaw
  DaughterInLaw
  GranddaughterInLaw
  BrotherInLaw
  SisterInLaw
  Greatgrandson
  Greatgranddaughter
  GreatgranddaughterInLaw
  GreatNephew
  GreatNiece
}

model AgencyDetails {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String      @unique
  mobileNumber   String?
  email          String?
  pan            String?
  tin            String?
  gst            String?
  contactDetails String
  Bidagency      Bidagency[]
}

model ApprovedActionPlanDetails {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  financialYear       String
  themeName           String
  activityCode        Int     @unique
  activityName        String
  activityDescription String
  activityFor         String
  sector              String
  locationofAsset     String
  estimatedCost       Int
  totalduration       String
  schemeName          String
  generalFund         Int
  scFund              Int
  stFund              Int
  isPublish           Boolean @default(false)

  WorksDetail    WorksDetail[]
  AggrementModel AggrementModel[]
}

model NitDetails {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  memoNumber              Int
  memoDate                DateTime
  isSupply                Boolean       @default(false)
  supplyitemname          String?
  publishingDate          DateTime
  documentDownloadFrom    DateTime
  startTime               DateTime
  endTime                 DateTime
  technicalBidOpeningDate DateTime
  financialBidOpeningDate DateTime?
  placeOfOpeningBids      String
  bidValidity             Int
  isPublished             Boolean       @default(false)
  publishhardcopy         String?
  nitCount                String        @default("1st call")
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  documents               Document[]
  WorksDetail             WorksDetail[]
}

enum TenderStatus {
  publish
  published
  ToBeOpened
  TechnicalBidOpening
  TechnicalEvaluation
  FinancialBidOpening
  FinancialEvaluation
  AOC
  Retender
  Cancelled
}

enum workStatus {
  approved
  tenderPublish
  workorder
  yettostart
  workinprogress
  workcompleted
  billgenerated
  billpaid
}

model WorksDetail {
  id                          String                    @id @default(auto()) @map("_id") @db.ObjectId
  workslno                    Int
  participationFee            Int
  earnestMoneyFee             Int
  finalEstimateAmount         Int
  tenderStatus                TenderStatus
  nitDetailsId                String                    @db.ObjectId
  nitDetails                  NitDetails                @relation(fields: [nitDetailsId], references: [id])
  biddingAgencies             Bidagency[]
  completionDate              DateTime?
  workCommencementDate        DateTime?
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  AwardofContract             AwardofContract?          @relation(fields: [awardofContractId], references: [id])
  approvedActionPlanDetailsId String                    @db.ObjectId
  paymentDetails              PaymentDetails[]
  workStatus                  workStatus                @default(approved)
  ApprovedActionPlanDetails   ApprovedActionPlanDetails @relation(fields: [approvedActionPlanDetailsId], references: [id])
  awardofContractId           String?                   @db.ObjectId
  WorkOrderCancellation       WorkOrderCancellation[]
}

model Bidagency {
  id                           String                      @id @default(auto()) @map("_id") @db.ObjectId
  agencydetails                AgencyDetails               @relation(fields: [agencyDetailsId], references: [id])
  biddingAmount                Int?
  WorksDetail                  WorksDetail?                @relation(fields: [worksDetailId], references: [id])
  worksDetailId                String?                     @db.ObjectId
  agencyDetailsId              String                      @unique @db.ObjectId
  technicalEvelution           TechnicalEvelutiondocument? @relation(fields: [technicalEvelutiondocumentId], references: [id])
  technicalEvelutiondocumentId String?                     @db.ObjectId
  workorderdetails             workorderdetails[]
  AggrementModel               AggrementModel[]
  earnestMoneyRegister         EarnestMoneyRegister[]
}

model TechnicalEvelutiondocument {
  id                         String             @id @default(auto()) @map("_id") @db.ObjectId
  credencial                 Credencial         @relation(fields: [credencialId], references: [id])
  validityofdocument         Validityofdocument @relation(fields: [validityofdocumentId], references: [id])
  byelow                     Boolean            @default(false)
  pfregistrationupdatechalan Boolean            @default(false)
  declaration                Boolean            @default(false)
  machinary                  Boolean            @default(false)
  qualify                    Boolean            @default(false)
  remarks                    String?
  bidagencyId                String             @db.ObjectId // Ensure this is correct
  credencialId               String             @db.ObjectId
  validityofdocumentId       String             @db.ObjectId
  Bidagency                  Bidagency[]
}

model Credencial {
  id                         String                       @id @default(auto()) @map("_id") @db.ObjectId
  sixtyperamtput             Boolean
  workorder                  Boolean                      @default(false)
  paymentcertificate         Boolean                      @default(false)
  comcertificat              Boolean                      @default(false)
  TechnicalEvelutiondocument TechnicalEvelutiondocument[]
}

model Validityofdocument {
  id                         String                       @id @default(auto()) @map("_id") @db.ObjectId
  itreturn                   Boolean                      @default(false)
  gst                        Boolean                      @default(false)
  tradelicence               Boolean                      @default(false)
  ptax                       Boolean                      @default(false)
  TechnicalEvelutiondocument TechnicalEvelutiondocument[]
}

model AwardofContract {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  workodermenonumber String
  workordeermemodate DateTime
  isdelivery         Boolean            @default(false)
  deliveryDate       DateTime?
  workorderdetails   workorderdetails[]
  WorksDetail        WorksDetail[]
}

enum EarnestMoneyStatus {
  pending
  paid
  refunded
  forfeited
}

model EarnestMoneyRegister {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  earnestMoneyAmount Int
  paymentstatus      EarnestMoneyStatus @default(pending)
  bidderName         Bidagency          @relation(fields: [bidderId], references: [id])
  bidderId           String             @db.ObjectId
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  paymentDate        DateTime?
  paymentMethod      PaymentMethod?
  chequeNumber       String?
  chequeDate         DateTime?
}

model workorderdetails {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  awardofcontractdetails AwardofContract @relation(fields: [awardofContractId], references: [id])
  Bidagency              Bidagency?      @relation(fields: [bidagencyId], references: [id])
  bidagencyId            String?         @db.ObjectId
  awardofContractId      String          @db.ObjectId
}

model PaymentDetails {
  id                    String             @id @default(auto()) @map("_id") @db.ObjectId
  grossBillAmount       Int
  lessIncomeTax         IncomeTaxRegister? @relation(fields: [incomeTaxRegisterId], references: [id])
  lessLabourWelfareCess LabourWelfareCess? @relation(fields: [labourWelfareCessId], references: [id])
  lessTdsCgst           TdsCgst?           @relation(fields: [tdsCgstId], references: [id])
  lessTdsSgst           TdsSgst?           @relation(fields: [tdsSgstId], references: [id])
  securityDeposit       SecrutityDeposit?  @relation(fields: [secrutityDepositId], references: [id])
  billPaymentDate       DateTime
  eGramVoucher          String
  eGramVoucherDate      DateTime
  gpmsVoucherNumber     String
  gpmsVoucherDate       DateTime
  billType              String
  mbrefno               String
  netAmt                Int
  workcompletaitiondate DateTime?
  isfinalbill           Boolean            @default(false)
  secrutityDepositId    String             @db.ObjectId
  incomeTaxRegisterId   String             @db.ObjectId
  labourWelfareCessId   String             @db.ObjectId
  tdsCgstId             String             @db.ObjectId
  tdsSgstId             String             @db.ObjectId
  WorksDetail           WorksDetail        @relation(fields: [worksDetailId], references: [id])
  worksDetailId         String             @db.ObjectId
}

enum SecrutityDepositStatus {
  paid
  unpaid
}

model SecrutityDeposit {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  securityDepositAmt Int
  maturityDate       DateTime?
  PaymentDetails     PaymentDetails[]
  paymentMethod      PaymentMethod?
  chequeNumber       String?
  chequeDate         DateTime?
  paymentDate        DateTime?
  transactionID      String?
  paymentstatus      SecrutityDepositStatus @default(unpaid)
  createdAt          DateTime               @default(now())
}

enum PaymentMethod {
  CASH
  CHEQUE
  ONLINE_TRANSFER
}

model IncomeTaxRegister {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  incomeTaaxAmount Int
  paid             Boolean          @default(false)
  createdAt        DateTime         @default(now())
  paidAt           DateTime?
  paymentMethod    PaymentMethod?
  chequeNumber     String?
  PaymentDetails   PaymentDetails[]
}

model LabourWelfareCess {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  labourWelfarecessAmt Int
  paid                 Boolean          @default(false)
  createdAt            DateTime         @default(now())
  PaymentDetails       PaymentDetails[]
}

model TdsCgst {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  tdscgstAmt     Int
  paid           Boolean          @default(false)
  createdAt      DateTime         @default(now())
  PaymentDetails PaymentDetails[]
}

model TdsSgst {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  tdsSgstAmt     Int
  paid           Boolean          @default(false)
  createdAt      DateTime         @default(now())
  PaymentDetails PaymentDetails[]
}

model AggrementModel {
  id                          String                    @id @default(auto()) @map("_id") @db.ObjectId
  aggrementno                 String
  aggrementdate               DateTime
  workdetails                 ApprovedActionPlanDetails @relation(fields: [approvedActionPlanDetailsId], references: [id])
  acceptagency                Bidagency                 @relation(fields: [bidagencyId], references: [id])
  approvedActionPlanDetailsId String                    @db.ObjectId
  bidagencyId                 String                    @db.ObjectId
}

model PDF {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  filename   String
  contentUrl String
  createdAt  DateTime @default(now())
}

model Mouzaname {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  jlno          String
  population    Population?  @relation(fields: [populationId], references: [id])
  VillageData   VillageData? @relation(fields: [villageDataId], references: [id])
  villageDataId String?      @db.ObjectId
  populationId  String?      @db.ObjectId
}

model Sansad {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  sansadname   String
  sansadnumber String        @unique
  VillageData  VillageData[]
}

model Member {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  salutation         String
  firstName          String
  middleName         String? // Optional
  lastName           String? // Optional
  fatherGuardianName String? // Optional
  dob                DateTime // Store as DateTime
  gender             String // 'male', 'female', 'other'
  maritalStatus      String // 'single', 'married', 'divorced', etc.
  religion           String
  caste              String? // Optional
  eduQualification   String
  computerLiterate   String // 'yes', 'no'
  motherTongue       String
  bloodGroup         String // 'A+', 'B-', etc.
  contactNo          String // Store as a string for phone numbers
  whatsappNo         String? // Optional
  email              String       @unique // Ensure unique email addresses
  address            String
  village            String
  pin                String // Store as a string (6-digit PIN code)
  postOffice         String
  district           String
  policeStation      String
  aadhar             String       @unique // Ensure unique Aadhar numbers
  pan                String? // Optional
  epic               String? // Optional
  profession         String
  annualFamilyIncome String
  photo              String? // Optional, store file path or URL for images
  createdAt          DateTime     @default(now()) // Automatically set the current time when the document is created
  updatedAt          DateTime     @updatedAt // Automatically updated on record modification
  VillageData        VillageData? @relation(fields: [villageDataId], references: [id])
  villageDataId      String?      @db.ObjectId
}

model PollingDetails {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  pollingdetailsno   Int          @unique
  pollingdetailsname String
  malevoter          Int
  femalevoter        Int
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  VillageData        VillageData? @relation(fields: [villageDataId], references: [id])
  villageDataId      String?      @db.ObjectId
}

model Population {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  male          Int
  female        Int
  st            Int
  sc            Int
  obc           Int
  other         Int
  hindu         Int
  muslim        Int
  christian     Int
  otherReligion Int

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Mouzaname Mouzaname[]
}

model VillageData {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  pollingstatusdetaial PollingDetails[]
  memberdetails        Member[]
  sansaddetails        Sansad           @relation(fields: [sansadId], references: [id])
  sansadId             String           @db.ObjectId
  mouzadetails         Mouzaname[]
}

model Village {
  id         String                 @id @default(auto()) @map("_id") @db.ObjectId
  jlNo       String
  name       String
  households Int
  yearlyData YearlyPopulationData[]
}

model YearlyPopulationData {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  villageId            String  @db.ObjectId
  village              Village @relation(fields: [villageId], references: [id])
  year                 Int
  totalPopulation      Int
  malePopulation       Int
  femalePopulation     Int
  totalLiterate        Int
  maleLiterate         Int
  femaleLiterate       Int
  scPopulation         Int
  stPopulation         Int
  illiteratePopulation Int
  childPopulation      Int

  @@unique([villageId, year])
}

model TenderPublish {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  publishAuthority String
  startdate        DateTime
  enddate          DateTime
  documentUrl      String
  documentKey      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model AdminMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  bgColor   String   @default("bg-blue-600")
  textColor String   @default("text-white")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TubewellStock {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  tubewellType String
  quantity     Int
  lastUpdated  DateTime @default(now())
}

model News {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  date      DateTime @default(now())
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Circular {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  date      DateTime @default(now())
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tender {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  openDate    DateTime
  closeDate   DateTime
  fileUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum NotificationType {
  INFO // = "INFO"
  WARNING // = "WARNING"
  ERROR // = "ERROR"
  SUCCESS // = "SUCCESS"
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  type      NotificationType @default(INFO)
  link      String?
  user      User             @relation(fields: [userId], references: [id])
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId    String   @db.ObjectId
  recipientId String   @db.ObjectId
  content     String
  createdAt   DateTime @default(now())
  sender      User     @relation("MessagesSent", fields: [senderId], references: [id])
  recipient   User     @relation("MessagesReceived", fields: [recipientId], references: [id])
}

model adminMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  excerpt   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UsefulLink {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FormDownload {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  category      String
  downloadUrl   String
  assetId       String
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Statistic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String
  details   String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Complaint {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  details   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GovernmentScheme {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("government_schemes")
}

model Quotation {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  nitMemoNo                String
  nitMemoDate              DateTime
  materialName             String
  submissionDate           DateTime
  quotationStartDate       DateTime
  quotationEndDate         DateTime
  quotationOpeningDateTime DateTime

  openingLocation String

  items QuotationItem[]
}

model QuotationItem {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  quotationId      String    @db.ObjectId
  quotation        Quotation @relation(fields: [quotationId], references: [id])
  itemName         String
  itemDescription  String
  itemQuantity     Int
  itemUnit         String
  itemCost         Float
  deliverySite     String
  deliveryDeadline DateTime
}

model Document {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  fileUrl   String
  fileKey   String
  nitId     String     @db.ObjectId
  nit       NitDetails @relation(fields: [nitId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum ProdhanStatus {
  active
  inactive
}

model ActiveProdhanDetails {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  fname              String
  lname              String
  middlename         String?
  gender             Gender
  dateOfBirth        DateTime
  status             ProdhanStatus @default(active)
  mobileNumber       String
  joinDate           DateTime
  address            String
  villageName        String
  periodOfWork       String
  periodEndDate      DateTime
  activeprodhanImage String?
}

model Email {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  to          String[]
  cc          String[]
  bcc         String[]
  subject     String
  content     String
  from        String
  attachments Attachment[]
  status      EmailStatus  @default(SENT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Attachment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName     String
  fileUrl      String
  cloudinaryId String
  email        Email    @relation(fields: [emailId], references: [id])
  emailId      String   @db.ObjectId
  createdAt    DateTime @default(now())
}

enum EmailStatus {
  SENT
  FAILED
  PENDING
}

model EmailService {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  emailservicestatus Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model WarishDocument {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  warishId           String
  documentType       String
  cloudinaryUrl      String
  cloudinaryPublicId String
  verified           Boolean           @default(false)
  remarks            String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  warish             WarishApplication @relation(fields: [warishId], references: [id])
  User               User?             @relation(fields: [userId], references: [id])
  userId             String?           @db.ObjectId
}

// const noticeTypes = ["Tender", "Notice", "Circular", "Other"];

enum NoticeTypes {
  Tender
  Notice
  Circular
  Other
}

model Notice {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  department  String
  type        NoticeTypes // Tender, Notice, Circular, Other
  reference   String      @unique
  files       File[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model File {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  url          String
  cloudinaryId String? // Add this field
  type         String
  noticeId     String   @db.ObjectId
  notice       Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum ServiceType {
  WATER_TANKER
  DUSTBIN_VAN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTED
  COMPLETED
  CANCELLED
}

model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  serviceType   ServiceType
  userId        String        @db.ObjectId
  employeeId    String?       @db.ObjectId // Made optional
  name          String
  address       String
  phone         String
  bookingDate   DateTime
  status        BookingStatus @default(PENDING)
  amount        Float
  isPaid        Boolean       @default(false)
  paymentDate   DateTime?
  receiptNumber String?
  confirmedBy   String?       @db.ObjectId
  confirmedAt   DateTime?
  completedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cancelledAt   DateTime?
  isDeposited   Boolean       @default(false)
  depositDate   DateTime?
  notes         String? // Added for additional notes

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([employeeId])
  @@index([status])
  @@index([bookingDate])
}

model ServiceFee {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  serviceType ServiceType
  amount      Float
  updatedBy   String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([serviceType])
}

model ReceiptCounter {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  year       String   @unique
  lastNumber Int      @default(0)
  updatedAt  DateTime @updatedAt
}

model ServiceAvailability {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  serviceType ServiceType
  date        DateTime // Date without time component
  available   Boolean     @default(true)
  capacity    Int         @default(3)
  booked      Int         @default(0)
  maintenance Boolean     @default(false) // Added maintenance flag
  notes       String? // Added for maintenance notes
  createdBy   String?     @db.ObjectId // Track who created/modified
  updatedBy   String?     @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([serviceType, date])
  @@index([date])
  @@index([serviceType])
}

model AuditLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  action     String
  entityId   String
  entityType String
  details    String?
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model FamilyMember {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  relation   String
  age        Int?
  occupation String?

  parentId String?        @db.ObjectId
  parent   FamilyMember?  @relation("FamilyHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children FamilyMember[] @relation("FamilyHierarchy")

  certificateId String?                   @db.ObjectId
  certificate   FamilyLineageCertificate? @relation(fields: [certificateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FamilyLineageCertificate {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  certificateNo String @unique

  // Ancestor details
  ancestorName  String
  casteCategory String

  // Address details
  village    String
  postOffice String
  block      String
  district   String
  state      String

  // Family tree
  familyMembers FamilyMember[]

  // Certificate status and workflow
  status         CertificateStatus @default(DRAFT)
  issueDate      DateTime?
  expiryDate     DateTime?
  validityMonths Int               @default(6)

  // Workflow tracking
  fieldEnquiry FieldEnquiry?
  approvals    Approval[]
  renewals     Renewal[]

  // Issuing authority
  issuedBy    String?
  designation String?

  // Applicant details
  applicantName    String
  applicantPhone   String
  applicantEmail   String?
  applicantAddress String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model FieldEnquiry {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  certificateId String                   @unique @db.ObjectId
  certificate   FamilyLineageCertificate @relation(fields: [certificateId], references: [id])

  enquiryOfficer  String
  enquiryDate     DateTime
  findings        String
  recommendations String
  status          EnquiryStatus @default(PENDING)

  // Evidence collected
  witnessNames      String[]
  documentsVerified String[]
  communityVerified Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Approval {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  certificateId String                   @db.ObjectId
  certificate   FamilyLineageCertificate @relation(fields: [certificateId], references: [id])

  approverName String
  designation  String
  approvalDate DateTime
  status       ApprovalStatus
  comments     String?
  level        Int // 1 for first level, 2 for second level, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Renewal {
  id                    String                   @id @default(auto()) @map("_id") @db.ObjectId
  originalCertificateId String                   @db.ObjectId
  certificate           FamilyLineageCertificate @relation(fields: [originalCertificateId], references: [id])

  renewalDate   DateTime
  newExpiryDate DateTime
  renewalReason String
  status        RenewalStatus @default(PENDING)

  // Updated information if any
  updatedFamilyTree Json?
  additionalNotes   String?

  processedBy   String?
  processedDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CertificateStatus {
  DRAFT
  FIELD_ENQUIRY_PENDING
  FIELD_ENQUIRY_COMPLETED
  APPROVAL_PENDING
  APPROVED
  ISSUED
  EXPIRED
  REJECTED
  CANCELLED
}

enum EnquiryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  RETURNED_FOR_CLARIFICATION
}

enum RenewalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model WorkOrderCancellation {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  workOrderId  String      @db.ObjectId
  worksDetail  WorksDetail @relation(fields: [workOrderId], references: [id])
  cancelReason String
  cancelDate   DateTime    @default(now())
  cancelledBy  String
  remarks      String?
  documents    String?
  status       String      @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("work_order_cancellations")
}
